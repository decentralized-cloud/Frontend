trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - main
      - release/*
      - feature/*
      - hotfix/*
  paths:
    exclude:
      - README.md

pool:
  vmImage: "ubuntu-latest"

variables:
  DOCKER_CONTAINER_REGISTRY: "Decentralized Cloud Docker Hub"
  DOCKER_REPOSITORY_NAME_ADMIN: "decentralizedcloud/frontend-admin"
  DOCKER_REPOSITORY_NAME_PUBLIC: "decentralizedcloud/frontend-public"
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    artifact_version: latest
  ${{ if not(eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
    artifact_version: $(GitVersion.SemVer)

steps:
  - task: gitversion/setup@0
    displayName: "Setting up GitVersion"
    inputs:
      versionSpec: "5.x"

  - task: gitversion/execute@0
    displayName: "Figure out GitVersion"
    inputs:
      configFilePath: "./GitVersion.yml"

  - task: Docker@2
    displayName: "Build admin"
    inputs:
      repository: $(DOCKER_REPOSITORY_NAME_ADMIN)
      command: "build"
      Dockerfile: "$(system.defaultWorkingDirectory)/apps/admin/docker/Dockerfile"
      buildContext: "$(system.defaultWorkingDirectory)/apps/admin"
      arguments: "--build-arg VERSION=${{variables.artifact_version}}"
      tags: ${{variables.artifact_version}}

  - task: Docker@2
    displayName: "Build public"
    inputs:
      repository: $(DOCKER_REPOSITORY_NAME_PUBLIC)
      command: "build"
      Dockerfile: "$(system.defaultWorkingDirectory)/apps/public/docker/Dockerfile"
      buildContext: "$(system.defaultWorkingDirectory)/apps/public"
      arguments: "--build-arg VERSION=${{variables.artifact_version}}"
      tags: ${{variables.artifact_version}}

  - task: Docker@2
    displayName: "Test and coverage admin"
    inputs:
      repository: $(DOCKER_REPOSITORY_NAME_ADMIN)
      command: "build"
      Dockerfile: "$(system.defaultWorkingDirectory)/apps/admin/docker/Dockerfile.testAndCoverage"
      buildContext: "$(system.defaultWorkingDirectory)/apps/admin"
      arguments: "--build-arg COVERALLS_SERVICE_NAME=$(COVERALLS_SERVICE_NAME) --build-arg COVERALLS_REPO_TOKEN=$(COVERALLS_REPO_TOKEN)"

  - task: Docker@2
    displayName: "Docker login"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      command: "login"

  - task: Docker@2
    displayName: "Push admin docker image"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      repository: $(DOCKER_REPOSITORY_NAME_ADMIN)
      command: "push"
      tags: ${{variables.artifact_version}}

  - task: Docker@2
    displayName: "Push public docker image"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      repository: $(DOCKER_REPOSITORY_NAME_PUBLIC)
      command: "push"
      tags: ${{variables.artifact_version}}

  - task: Docker@2
    displayName: "Docker logout"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      command: "logout"

  - task: HelmInstaller@0
    displayName: "Installing helm"
    inputs:
      helmVersion: "3.5.2"
      installKubectl: false

  - task: Bash@3
    displayName: "Packaging helm for admin"
    inputs:
      targetType: "inline"
      script: |
        helm package --destination "$(system.defaultWorkingDirectory)/admin-chart-output" --app-version ${{variables.artifact_version}} "$(system.defaultWorkingDirectory)/apps/admin/helm-charts"

  - task: PublishPipelineArtifact@1
    displayName: "Publish admin helm artifact"
    inputs:
      targetPath: "$(system.defaultWorkingDirectory)/admin-chart-output"
      artifact: "admin_helm"
      publishLocation: "pipeline"

  - task: Bash@3
    displayName: "Prepare to publish pipeline admin artifact details"
    inputs:
      targetType: "inline"
      script: |
        mkdir -p "$(system.defaultWorkingDirectory)/admin_artifact_details"
        echo $(jq -n --arg version "${{variables.artifact_version}}" --arg docker_image_tag "$(DOCKER_REPOSITORY_NAME_ADMIN):${{variables.artifact_version}}" '{version: $version, docker_image_tag: $docker_image_tag}') > "$(system.defaultWorkingDirectory)/admin_artifact_details/build_details.json"
        cp "$(system.defaultWorkingDirectory)/apps/admin/firebase.json" "$(system.defaultWorkingDirectory)/admin_artifact_details/"
        cp "$(system.defaultWorkingDirectory)/apps/admin/docker/Dockerfile.firebase" "$(system.defaultWorkingDirectory)/admin_artifact_details/"
        cp "$(system.defaultWorkingDirectory)/apps/admin/scripts/publish_to_firebase.sh" "$(system.defaultWorkingDirectory)/admin_artifact_details/"

  - task: PublishPipelineArtifact@1
    displayName: "Publish admin artifact details"
    inputs:
      targetPath: "$(system.defaultWorkingDirectory)/admin_artifact_details"
      artifact: "admin_artifact_details"
      publishLocation: "pipeline"

  - task: Bash@3
    displayName: "Prepare to publish pipeline public artifact details"
    inputs:
      targetType: "inline"
      script: |
        mkdir -p "$(system.defaultWorkingDirectory)/public_artifact_details"
        echo $(jq -n --arg version "${{variables.artifact_version}}" --arg docker_image_tag "$(DOCKER_REPOSITORY_NAME_PUBLIC):${{variables.artifact_version}}" '{version: $version, docker_image_tag: $docker_image_tag}') > "$(system.defaultWorkingDirectory)/public_artifact_details/build_details.json"
        cp "$(system.defaultWorkingDirectory)/apps/public/firebase.json" "$(system.defaultWorkingDirectory)/public_artifact_details/"
        cp "$(system.defaultWorkingDirectory)/apps/public/docker/Dockerfile.firebase" "$(system.defaultWorkingDirectory)/public_artifact_details/"
        cp "$(system.defaultWorkingDirectory)/apps/public/scripts/publish_to_firebase.sh" "$(system.defaultWorkingDirectory)/public_artifact_details/"

  - task: PublishPipelineArtifact@1
    displayName: "Publish public artifact details"
    inputs:
      targetPath: "$(system.defaultWorkingDirectory)/public_artifact_details"
      artifact: "public_artifact_details"
      publishLocation: "pipeline"
